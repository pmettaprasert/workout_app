// Mocks generated by Mockito 5.4.5 from annotations
// in hwk3/test/mocks/mock_group_workout_session.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:firebase_auth/firebase_auth.dart' as _i14;
import 'package:hwk3/models/exercise.dart' as _i12;
import 'package:hwk3/models/group_workout_session.dart' as _i9;
import 'package:hwk3/models/workout.dart' as _i6;
import 'package:hwk3/models/workout_plan.dart' as _i5;
import 'package:hwk3/models/workout_plans_data_source.dart' as _i3;
import 'package:hwk3/models/workouts_data_source.dart' as _i4;
import 'package:hwk3/repository/auth_repository.dart' as _i13;
import 'package:hwk3/repository/group_workout_session_repository.dart' as _i7;
import 'package:hwk3/repository/recording_workout_repository.dart' as _i11;
import 'package:hwk3/service/firebase/group_workout_session_data_source.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGroupWorkoutSessionDataSource_0 extends _i1.SmartFake
    implements _i2.GroupWorkoutSessionDataSource {
  _FakeGroupWorkoutSessionDataSource_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWorkoutPlansDataSource_1 extends _i1.SmartFake
    implements _i3.WorkoutPlansDataSource {
  _FakeWorkoutPlansDataSource_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWorkoutsDataSource_2 extends _i1.SmartFake
    implements _i4.WorkoutsDataSource {
  _FakeWorkoutsDataSource_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWorkoutPlan_3 extends _i1.SmartFake implements _i5.WorkoutPlan {
  _FakeWorkoutPlan_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWorkout_4 extends _i1.SmartFake implements _i6.Workout {
  _FakeWorkout_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GroupWorkoutSessionRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockGroupWorkoutSessionRepository extends _i1.Mock
    implements _i7.GroupWorkoutSessionRepository {
  MockGroupWorkoutSessionRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GroupWorkoutSessionDataSource get dataSource => (super.noSuchMethod(
        Invocation.getter(#dataSource),
        returnValue: _FakeGroupWorkoutSessionDataSource_0(
          this,
          Invocation.getter(#dataSource),
        ),
      ) as _i2.GroupWorkoutSessionDataSource);

  @override
  _i8.Future<String> createGroupWorkoutSession(
          _i9.GroupWorkoutSession? session) =>
      (super.noSuchMethod(
        Invocation.method(
          #createGroupWorkoutSession,
          [session],
        ),
        returnValue: _i8.Future<String>.value(_i10.dummyValue<String>(
          this,
          Invocation.method(
            #createGroupWorkoutSession,
            [session],
          ),
        )),
      ) as _i8.Future<String>);

  @override
  _i8.Future<_i9.GroupWorkoutSession?> getGroupWorkoutSessionById(
          String? workoutId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroupWorkoutSessionById,
          [workoutId],
        ),
        returnValue: _i8.Future<_i9.GroupWorkoutSession?>.value(),
      ) as _i8.Future<_i9.GroupWorkoutSession?>);

  @override
  _i8.Future<List<_i9.GroupWorkoutSession>> getGroupWorkoutsForUser(
          String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroupWorkoutsForUser,
          [userId],
        ),
        returnValue: _i8.Future<List<_i9.GroupWorkoutSession>>.value(
            <_i9.GroupWorkoutSession>[]),
      ) as _i8.Future<List<_i9.GroupWorkoutSession>>);

  @override
  _i8.Future<void> updateParticipantContributions({
    required String? workoutId,
    required String? userId,
    required Map<String, int>? newContributions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateParticipantContributions,
          [],
          {
            #workoutId: workoutId,
            #userId: userId,
            #newContributions: newContributions,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> deleteGroupWorkoutSession(String? workoutId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteGroupWorkoutSession,
          [workoutId],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<_i9.GroupWorkoutSession?> getGroupWorkoutSessionByInviteCode(
          String? inviteCode) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroupWorkoutSessionByInviteCode,
          [inviteCode],
        ),
        returnValue: _i8.Future<_i9.GroupWorkoutSession?>.value(),
      ) as _i8.Future<_i9.GroupWorkoutSession?>);
}

/// A class which mocks [RecordingWorkoutRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRecordingWorkoutRepository extends _i1.Mock
    implements _i11.RecordingWorkoutRepository {
  MockRecordingWorkoutRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.WorkoutPlansDataSource get plansDataSource => (super.noSuchMethod(
        Invocation.getter(#plansDataSource),
        returnValue: _FakeWorkoutPlansDataSource_1(
          this,
          Invocation.getter(#plansDataSource),
        ),
      ) as _i3.WorkoutPlansDataSource);

  @override
  _i4.WorkoutsDataSource get workoutsDataSource => (super.noSuchMethod(
        Invocation.getter(#workoutsDataSource),
        returnValue: _FakeWorkoutsDataSource_2(
          this,
          Invocation.getter(#workoutsDataSource),
        ),
      ) as _i4.WorkoutsDataSource);

  @override
  _i8.Future<List<_i5.WorkoutPlan>> getAllPlans() => (super.noSuchMethod(
        Invocation.method(
          #getAllPlans,
          [],
        ),
        returnValue:
            _i8.Future<List<_i5.WorkoutPlan>>.value(<_i5.WorkoutPlan>[]),
      ) as _i8.Future<List<_i5.WorkoutPlan>>);

  @override
  _i8.Future<_i5.WorkoutPlan> getPlanByIndex(int? index) => (super.noSuchMethod(
        Invocation.method(
          #getPlanByIndex,
          [index],
        ),
        returnValue: _i8.Future<_i5.WorkoutPlan>.value(_FakeWorkoutPlan_3(
          this,
          Invocation.method(
            #getPlanByIndex,
            [index],
          ),
        )),
      ) as _i8.Future<_i5.WorkoutPlan>);

  @override
  _i8.Future<_i6.Workout> recordWorkout({
    required _i5.WorkoutPlan? plan,
    required Map<_i12.Exercise, int>? actualOutputs,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #recordWorkout,
          [],
          {
            #plan: plan,
            #actualOutputs: actualOutputs,
          },
        ),
        returnValue: _i8.Future<_i6.Workout>.value(_FakeWorkout_4(
          this,
          Invocation.method(
            #recordWorkout,
            [],
            {
              #plan: plan,
              #actualOutputs: actualOutputs,
            },
          ),
        )),
      ) as _i8.Future<_i6.Workout>);
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i13.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i14.User?> signInAnonymously() => (super.noSuchMethod(
        Invocation.method(
          #signInAnonymously,
          [],
        ),
        returnValue: _i8.Future<_i14.User?>.value(),
      ) as _i8.Future<_i14.User?>);
}
