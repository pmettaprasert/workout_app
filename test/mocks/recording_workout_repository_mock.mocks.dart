// Mocks generated by Mockito 5.4.5 from annotations
// in hwk3/test/mocks/recording_workout_repository_mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:hwk3/models/exercise.dart' as _i8;
import 'package:hwk3/models/workout.dart' as _i5;
import 'package:hwk3/models/workout_plan.dart' as _i4;
import 'package:hwk3/models/workout_plans_data_source.dart' as _i2;
import 'package:hwk3/models/workouts_data_source.dart' as _i3;
import 'package:hwk3/repository/recording_workout_repository.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWorkoutPlansDataSource_0 extends _i1.SmartFake
    implements _i2.WorkoutPlansDataSource {
  _FakeWorkoutPlansDataSource_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWorkoutsDataSource_1 extends _i1.SmartFake
    implements _i3.WorkoutsDataSource {
  _FakeWorkoutsDataSource_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWorkoutPlan_2 extends _i1.SmartFake implements _i4.WorkoutPlan {
  _FakeWorkoutPlan_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWorkout_3 extends _i1.SmartFake implements _i5.Workout {
  _FakeWorkout_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RecordingWorkoutRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRecordingWorkoutRepository extends _i1.Mock
    implements _i6.RecordingWorkoutRepository {
  MockRecordingWorkoutRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.WorkoutPlansDataSource get plansDataSource => (super.noSuchMethod(
        Invocation.getter(#plansDataSource),
        returnValue: _FakeWorkoutPlansDataSource_0(
          this,
          Invocation.getter(#plansDataSource),
        ),
      ) as _i2.WorkoutPlansDataSource);

  @override
  _i3.WorkoutsDataSource get workoutsDataSource => (super.noSuchMethod(
        Invocation.getter(#workoutsDataSource),
        returnValue: _FakeWorkoutsDataSource_1(
          this,
          Invocation.getter(#workoutsDataSource),
        ),
      ) as _i3.WorkoutsDataSource);

  @override
  _i7.Future<List<_i4.WorkoutPlan>> getAllPlans() => (super.noSuchMethod(
        Invocation.method(
          #getAllPlans,
          [],
        ),
        returnValue:
            _i7.Future<List<_i4.WorkoutPlan>>.value(<_i4.WorkoutPlan>[]),
      ) as _i7.Future<List<_i4.WorkoutPlan>>);

  @override
  _i7.Future<_i4.WorkoutPlan> getPlanByIndex(int? index) => (super.noSuchMethod(
        Invocation.method(
          #getPlanByIndex,
          [index],
        ),
        returnValue: _i7.Future<_i4.WorkoutPlan>.value(_FakeWorkoutPlan_2(
          this,
          Invocation.method(
            #getPlanByIndex,
            [index],
          ),
        )),
      ) as _i7.Future<_i4.WorkoutPlan>);

  @override
  _i7.Future<_i5.Workout> recordWorkout({
    required _i4.WorkoutPlan? plan,
    required Map<_i8.Exercise, int>? actualOutputs,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #recordWorkout,
          [],
          {
            #plan: plan,
            #actualOutputs: actualOutputs,
          },
        ),
        returnValue: _i7.Future<_i5.Workout>.value(_FakeWorkout_3(
          this,
          Invocation.method(
            #recordWorkout,
            [],
            {
              #plan: plan,
              #actualOutputs: actualOutputs,
            },
          ),
        )),
      ) as _i7.Future<_i5.Workout>);
}
